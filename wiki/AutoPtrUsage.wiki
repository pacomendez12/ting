#summary Usage of the ting auto pointer

= Introduction =

*ting* offers its own implementation of auto pointer. It is very similar to std::auto_ptr, but have some improvements, like automatic conversion to bool-like type.
Intention of auto pointers is to prevent possible memory leaks and automatically free memory occupied by object when auto pointer goes out of scope.

*ting* auto pointer is implemented as ting::Ptr class.



<br>
= Header file =

In order to use ting::Ptr one needs to include the following header file:
{{{
#include <ting/Ptr.hpp>
}}}



<br>
= ting::Ptr usage =

The main concept of auto pointer is that only one auto pointer owns the object. It is allowed to assign auto pointers to each other, but, in that case the object owning will be transferred from one auto pointer to another. This means that when assigning autoptr#1 to autoptr#2 the autoptr#1 will become invalid and autoptr#2 will hold the reference to the object.

Example:
{{{
class MyClass{
public:
    int a;
};

{
    ting::Ptr<MyClass> p1(new MyClass());

    ting::Ptr<MyClass> p2;

    //Here, the "p1" points to the object of class MyClass,
    //and "p2" is invalid (does not point to any object).

    //access some members of the object
    p1->a = 213;
    
    //assign "p1" to "p2"
    p2 = p1;

    //Here, the "p2" points to the object of class MyClass,
    //and "p1" is invalid (does not point to any object).
    //I.e. the owning of the object is transferred to "p2".
}
//

}}}