#summary ting library usage tutorial
#labels Featured

=Creating a Thread=
first of all we need to include *sckt* header to use the library
{{{
#include <ting.hpp>
}}}

After that we can start using the library. To create a thread one needs to derive a new class representing her thread from ting::Thread base class and override its ting::Thread::Run() method
{{{
class MyThread : public ting::Thread{
public:
    //override
    void Run(){
        //do some thread actions
    };
};
}}}
After we have our thread class defined we can create an object of this class and start the thread execution by calling ting::Thread::Start() method on it
{{{
MyThread thr; //create an object on the stack for simplicity
thr.Start();//start thread execution
}}}
After starting the thread we can wait for it to finish its execution by calling ting::Thread::Join() method on the thread object. After this call we can surely say that thread has finished its execution
{{{
thr.Join();
}}}




Note that the destructor of _ting::Thread_ class also calls the _Join()_ method to ensure that the thread is finished before destroying the thread object. Before calling _Join()_ the destructor pushes a _ting::QuitMessage _ to thread's message queue (see next section about Messages and Queues), so you probably should do message handling in your implementation of _ting::Thread::Run()_ method.

=Messages and Message Queues=
Every thread object has its own message queue (_ting::Thread::queue_), thus the thread can receive and handle messages from other threads.

Typical implementation of the _ting::Thread::Run()_ method which handles messages looks as follows
{{{
void MyThread::Run(){
    while( !this->quitFlag){
        std::auto_ptr<ting::Message> m = this->queue.GetMsg();
        m->Handle();
    }
};
}}}
This example use _ting::Queue::GetMsg()_ to retrieve messages from the queue, _GetMsg()_ blocks execution if there are no messages on the queue until some message arrives.

It is also possible to use _ting::Queue::PeekMsg()_ which does not block execution, typical implementation of _Run()_ method will look as follows

{{{
void MyThread::Run(){
    while( !this->quitFlag){
        //handle all messages on the queue
        std::auto_ptr<ting::Message> m;
        while( (m = this->queue.PeekMsg()).get() != 0){
            m->Handle();
        }
        //do some actions to be done every cycle
        //...
    }
};
}}}

Note that each thread object has a _quitFlag_ volatile member variable which serves as a convenient indicator to the thread showing when the thread should finish its execution.

Note that _ting::QuitMessage _ will set the _quitFlag_ when it is handled.